name: L2 Prover
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint_zk:
    name: Lint ${{ matrix.backend }} backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: ["sp1", "risc0"]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check ${{ matrix.backend }} Cargo.lock modified but not committed
        run: |
          git diff --exit-code -- crates/l2/prover/zkvm/interface/${{ matrix.backend }}/Cargo.lock

      - name: RISC-V Risc0 toolchain install
        if: matrix.backend == 'risc0'
        # should be able to specify a version for `rzup install rust` (toolchain version)
        # but it throws a "error decoding response body" in that case
        run: |
          curl -L https://risczero.com/install | bash
          ~/.risc0/bin/rzup install cargo-risczero 2.1.0
          ~/.risc0/bin/rzup install rust

      - name: RISC-V SP1 toolchain install
        if: matrix.backend == 'sp1'
        run: |
          curl -L https://sp1.succinct.xyz | bash
          ~/.sp1/bin/sp1up --version 5.0.0

      - name: Check ${{ matrix.backend }} backend
        run: |
          cargo check -r -p ethrex-prover -F ${{ matrix.backend }}
          cargo check -r -p ethrex-replay -F ${{ matrix.backend }}
      - name: Clippy ${{ matrix.backend }} backend
        run: |
          cargo clippy -r -p ethrex-prover --all-targets -F ${{ matrix.backend }}

  lint_exec:
    name: Lint exec backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check exec
        run: |
          cargo check -p ethrex-prover
      - name: Clippy exec
        run: |
          cargo clippy -p ethrex-prover --all-targets

  lint_tdx:
    name: Lint tdx backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check tdx
        run: |
          cd crates/l2/tee/quote-gen
          cargo check
      - name: Clippy tdx
        run: |
          cd crates/l2/tee/quote-gen
          cargo clippy --all-targets
