services:
  reset_volumes:
    image: alpine
    volumes:
      - lighthouse:/lighthouse
      - ethrex:/ethrex
      - metrics:/metrics
    command: >
      sh -c '
      if [ -z "${KEEP_DATA:-}" ] || [ "${KEEP_DATA:-}" == "0" ] || [ "${KEEP_DATA:-}" == "false" ];
      then
        echo Removing previous data...;
        rm -rf /lighthouse/* /ethrex/* /metrics/*;
        echo Previous data removed. Starting from scratch;
      else
        echo KEEP_DATA is set, skipping data reset;
      fi
      '

  setup_jwt:
    image: alpine
    volumes:
      - secrets:/secrets
    command: sh -c 'apk add openssl && openssl rand -hex 32 | tr -d "\n" | tee /secrets/jwt.hex'
    depends_on:
      reset_volumes:
        condition: service_completed_successfully

  lighthouse:
    container_name: lighthouse
    image: sigp/lighthouse
    ports:
      - "9000:9000/tcp"
      - "9000:9000/udp"
      - "9001:9001/udp"
      - 127.0.0.1:5052:5052
    volumes:
      - secrets:/secrets
      - lighthouse:/root/.lighthouse
    command: >
      lighthouse
      --network ${ETHREX_NETWORK:-mainnet}
      beacon
      --http
      --http-address 0.0.0.0
      --metrics
      --metrics-address 0.0.0.0
      --metrics-allow-origin http://lighthouse:5054
      --execution-endpoint http://ethrex:8551
      --execution-jwt /secrets/jwt.hex
      --checkpoint-sync-url https://${ETHREX_NETWORK:-mainnet}-checkpoint-sync.attestant.io
      --checkpoint-sync-url-timeout 600
    depends_on:
      setup_jwt:
        condition: service_completed_successfully

  ethrex:
    container_name: ethrex
    image: "ghcr.io/lambdaclass/ethrex:latest"
    pull_policy: always
    platform: linux/amd64
    ports:
      - 127.0.0.1:8545:8545
    volumes:
      - secrets:/secrets
      - ethrex:/data
    command: >
      --http.addr 0.0.0.0
      --network ${ETHREX_NETWORK:-mainnet}
      --authrpc.addr 0.0.0.0
      --authrpc.jwtsecret /secrets/jwt.hex
      --metrics
      --metrics.port 3701
      --syncmode snap
      --datadir /data/${ETHREX_NETWORK:-mainnet}
    ulimits:
      nofile: 1000000
    depends_on:
      setup_jwt:
        condition: service_completed_successfully

  download_metrics_files:
    image: alpine
    volumes:
      - metrics:/metrics
    command: >
      sh -c '
      apk add curl;
      mkdir -p /metrics/grafana/data;
      mkdir -p /metrics/grafana/provisioning/datasources;
      mkdir -p /metrics/grafana/provisioning/dashboards/common_dashboards;
      mkdir -p /metrics/prometheus/data;
      chmod -R 777 /metrics/grafana/data;
      chmod -R 777 /metrics/prometheus/data;
      curl -L -o /metrics/grafana/provisioning/dashboards/dashboards.yaml https://raw.githubusercontent.com/lambdaclass/ethrex/refs/heads/${ETHREX_METRICS_BRANCH:-main}/metrics/provisioning/grafana/dashboards/dashboard_config_l1.yaml;
      curl -L -o /metrics/grafana/provisioning/dashboards/common_dashboards/ethereum_metrics_exporter.json https://raw.githubusercontent.com/lambdaclass/ethrex/refs/heads/${ETHREX_METRICS_BRANCH:-main}/metrics/provisioning/grafana/dashboards/common_dashboards/ethereum_metrics_exporter.json;
      curl -L -o /metrics/grafana/provisioning/dashboards/common_dashboards/ethrex_l1_perf.json https://raw.githubusercontent.com/lambdaclass/ethrex/refs/heads/${ETHREX_METRICS_BRANCH:-main}/metrics/provisioning/grafana/dashboards/common_dashboards/ethrex_l1_perf.json;
      curl -L -o /metrics/grafana/provisioning/datasources/prometheus.yaml https://raw.githubusercontent.com/lambdaclass/ethrex/refs/heads/${ETHREX_METRICS_BRANCH:-main}/metrics/provisioning/grafana/datasources/prometheus.yaml;
      curl -L -o /metrics/prometheus/prometheus.yaml https://raw.githubusercontent.com/lambdaclass/ethrex/refs/heads/${ETHREX_METRICS_BRANCH:-main}/metrics/provisioning/prometheus/prometheus_l1_sync_docker.yaml;
      sed -i /metrics/prometheus/prometheus.yaml -e "s/host.docker.internal:3701/ethrex:3701/" -e "s/host.docker.internal:5054/lighthouse:5054/";
      '
    depends_on:
      reset_volumes:
        condition: service_completed_successfully
    profiles:
      - metrics

  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"
    volumes:
      - type: volume
        source: metrics
        target: /etc/prometheus/prometheus.yaml
        volume:
          subpath: prometheus/prometheus.yaml
      - type: volume
        source: metrics
        target: /prometheus/data
        volume:
          subpath: prometheus/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: --config.file=/etc/prometheus/prometheus.yaml
    depends_on:
      download_metrics_files:
        condition: service_completed_successfully
    profiles:
      - metrics

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - type: volume
        source: metrics
        target: /etc/grafana/provisioning
        volume:
          subpath: grafana/provisioning
      - type: volume
        source: metrics
        target: /data
        volume:
          subpath: grafana/data
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_DATA=/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      prometheus:
        condition: service_started
      download_metrics_files:
        condition: service_completed_successfully
    profiles:
      - metrics

  ethereum-metrics-exporter:
    image: samcm/ethereum-metrics-exporter:latest
    command:
      - --execution-url=http://ethrex:8545
      - --execution-modules="eth","net","web3","txpool"
      - --consensus-url=http://lighthouse:5052
      - --metrics-port=9093
    ports:
      - "9093:9093"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    profiles:
      - metrics

volumes:
  secrets:
  lighthouse:
  ethrex:
  metrics:
