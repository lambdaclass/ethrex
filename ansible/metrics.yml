- name: Metrics Setup
  hosts: metrics

  vars:
    ansible_ssh_user: admin
    ethrex_dir: "/home/{{ ansible_user }}/ethrex"
    alerts_slack_channel: "{{ lookup('env', 'ALERTS_SLACK_CHANNEL') | default('#aaa', true) }}"
    alerts_slack_token: "{{ lookup('env', 'ALERTS_SLACK_TOKEN') | default('aaa', true) }}"
    dashboards:
      local: "{{ playbook_dir }}/../crates/blockchain/metrics/provisioning/grafana_provisioning/"
      remote: "/etc/grafana/provisioning/"
    alerts:
      local: "{{ playbook_dir }}/../crates/blockchain/metrics/provisioning/grafana_provisioning/alerting"
      remote: "/etc/grafana/provisioning/alerting/"

  tasks:
    - name: Install dependencies
      become: true
      apt:
        name:
          - rsync
          - git
          - make
          - gpg
          - zip
          - unzip
        state: present
        update_cache: true

    - name: Enable SSH agent forwarding
      become: true
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?AllowAgentForwarding.*'
        line: 'AllowAgentForwarding yes'
        state: present

    - name: Restart SSH service
      become: true
      systemd:
        name: sshd
        state: restarted

    - name: Reset connection
      meta: reset_connection

    - name: Check if Grafana is installed
      stat:
        path: /usr/sbin/grafana-server
      register: grafana

    - name: Clone monitoring stack repository
      git:
        repo: "git@github.com:lambdaclass/monitoring-stack.git"
        dest: /home/{{ ansible_user}}/monitoring-stack
        version: main
        accept_hostkey: true
      when: not grafana.stat.exists

    - name: Add localhost as known hosts
      shell: ssh-keyscan localhost >> /home/{{ ansible_user }}/.ssh/known_hosts
      when: not grafana.stat.exists

    - name: Install ansible on server
      become: true
      apt:
        name: ansible
        state: present
      when: not grafana.stat.exists

    - name: Run monitoring stack deployment
      make:
        chdir: /home/{{ ansible_user }}/monitoring-stack
        target: all
        params:
          GRAFANA_PASSWORD: "{{ lookup('env', 'GRAFANA_PASSWORD') }}"
          TARGET: localhost
      when: not grafana.stat.exists

    - name: Create alerts directory
      become: true
      file:
        path: "{{ alerts.remote }}"
        state: directory
        mode: '0755'
        owner: grafana
        group: grafana

    - name: Synchronize Grafana dashboards and dashboards (recursive copy of all folders and files)
      become: true
      synchronize:
        src: "{{ item.local }}"
        dest: "{{ item.remote }}"
        rsync_opts:
          - "-avz"
      loop:
        - name: dashboards
          local: "{{ dashboards.local }}"
          remote: "{{ dashboards.remote }}"
        - name: alerts
          local: "{{ alerts.local }}"
          remote: "{{ alerts.remote }}"

    - name: Update grafana provisioning for dashboards
      become: true
      template:
        src: templates/config/dashboards.yml.j2
        dest: /etc/grafana/provisioning/dashboards/dashboards.yml
        owner: grafana
        group: grafana
        mode: '0644'
      vars:
        grafana_dashboards:
          - name: l1_dashboards
            path: "{{ dashboards.remote }}"
          - name: l2_dashboards
            path: "{{ dashboards.remote }}l2_dashboards/"
          - name: common_dashboards
            path: "{{ dashboards.remote }}common_dashboards/"

    - name: Remove ProtectHome=true from grafana-server.service
      become: true
      lineinfile:
        path: /lib/systemd/system/grafana-server.service
        regexp: '^\s*ProtectHome\s*=\s*true\s*$'
        state: absent

    - name: Check if uid exists in Prometheus datasource
      lineinfile:
        path: /etc/grafana/provisioning/datasources/prometheus.yaml
        regexp: '^\s*uid:\s*prom-001\s*$'
        state: absent
      check_mode: yes
      register: uid_check
      changed_when: false

    - name: Add UID below type in Prometheus datasource
      become: true
      lineinfile:
        path: /etc/grafana/provisioning/datasources/prometheus.yaml
        regexp: '^(\s*)type:\s*prometheus\s*$'
        line: '\1type: prometheus\n\1uid: prom-001'
        backrefs: yes
      when: uid_check.found == 0

    - name: Add Ethereum Metrics Exporter scrape config
      become: true
      blockinfile:
        path: /etc/prometheus/prometheus.yml
        insertafter: "scrape_configs:"
        block: |
          {{ text | indent(2, first=true) }}
        state: present
      vars:
        text: |
          - job_name: 'ethereum_metrics_exporter'
            static_configs:
              - targets: ['localhost:8081']

    - name: Add alerts
      become: true
      template:
        src: templates/config/grafana.ini.j2
        dest: /etc/grafana/grafana.ini
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Replace Slack channel placeholder on remote
      become: true
      replace:
        path: "{{ alerts.remote }}/contact_points.json"
        regexp: '\$\{ALERTS_SLACK_CHANNEL\}'
        replace: "{{ alerts_slack_channel }}"

    - name: Replace Slack token placeholder on remote
      become: true
      replace:
        path: "{{ alerts.remote }}/contact_points.json"
        regexp: '\$\{ALERTS_SLACK_TOKEN\}'
        replace: "{{ alerts_slack_token }}"


    - name: Restart Grafana and Prometheus
      become: true
      systemd:
        name: "{{ item.service }}"
        state: restarted
        daemon_reload: true
      loop:
        - service: grafana-server
        - service: prometheus

    - name: Remove monitoring stack repo
      file:
        path: /home/{{ ansible_user }}/monitoring-stack
        state: absent
