use crate::sequencer::errors::{ConnectionHandlerError, ProofCoordinatorError};
use crate::sequencer::setup::{prepare_quote_prerequisites, register_tdx_key};
use crate::sequencer::utils::get_latest_sent_batch;
use crate::{
    BlockProducerConfig, CommitterConfig, EthConfig, ProofCoordinatorConfig, SequencerConfig,
};
use bytes::Bytes;
use ethrex_blockchain::Blockchain;
use ethrex_common::types::BlobsBundle;
use ethrex_common::types::block_execution_witness::ExecutionWitnessResult;
use ethrex_common::{
    Address,
    types::{Block, blobs_bundle},
};
use ethrex_l2_common::prover::{BatchProof, ProverType};
use ethrex_rpc::clients::eth::EthClient;
use ethrex_storage::Store;
use ethrex_storage_rollup::StoreRollup;
use secp256k1::SecretKey;
use serde::{Deserialize, Serialize};
use serde_with::serde_as;
use spawned_concurrency::messages::Unused;
use spawned_concurrency::tasks::{CastResponse, GenServer, GenServerHandle};
use std::net::{IpAddr, SocketAddr};
use std::sync::Arc;
use tokio::{
    io::{AsyncReadExt, AsyncWriteExt},
    net::{TcpListener, TcpStream},
};
use tracing::{debug, error, info, warn};

#[serde_as]
#[derive(Serialize, Deserialize)]
pub struct ProverInputData {
    pub blocks: Vec<Block>,
    pub db: ExecutionWitnessResult,
    pub elasticity_multiplier: u64,
    #[cfg(feature = "l2")]
    #[serde_as(as = "[_; 48]")]
    pub blob_commitment: blobs_bundle::Commitment,
    #[cfg(feature = "l2")]
    #[serde_as(as = "[_; 48]")]
    pub blob_proof: blobs_bundle::Proof,
}

/// Enum for the ProverServer <--> ProverClient Communication Protocol.
#[allow(clippy::large_enum_variant)]
#[derive(Serialize, Deserialize)]
pub enum ProofData {
    /// 1.
    /// The client performs any needed setup steps
    /// This includes things such as key registration
    ProverSetup {
        prover_type: ProverType,
        payload: Bytes,
    },

    /// 2.
    /// The Server acknowledges the receipt of the setup and it's completion
    ProverSetupACK,

    /// 3.
    /// The Client initiates the connection with a BatchRequest.
    /// Asking for the ProverInputData the prover_server considers/needs.
    /// The commit hash is used to ensure the client and server are compatible.
    BatchRequest { commit_hash: String },

    /// 4.
    /// The Server responds with an InvalidCodeVersion if the code version is not compatible.
    /// The Client should then update its code to match the server's version.
    InvalidCodeVersion { commit_hash: String },

    /// 5.
    /// The Server responds with a BatchResponse containing the ProverInputData.
    /// If the BatchResponse is ProofData::BatchResponse{None, None},
    /// the Client knows the BatchRequest couldn't be performed.
    BatchResponse {
        batch_number: Option<u64>,
        input: Option<ProverInputData>,
    },

    /// 6.
    /// The Client submits the zk Proof generated by the prover for the specified batch.
    ProofSubmit {
        batch_number: u64,
        batch_proof: BatchProof,
    },

    /// 7.
    /// The Server acknowledges the receipt of the proof and updates its state,
    ProofSubmitACK { batch_number: u64 },
}

impl ProofData {
    /// Builder function for creating a ProverSetup
    pub fn prover_setup(prover_type: ProverType, payload: Bytes) -> Self {
        ProofData::ProverSetup {
            prover_type,
            payload,
        }
    }

    /// Builder function for creating a ProverSetupACK
    pub fn prover_setup_ack() -> Self {
        ProofData::ProverSetupACK
    }

    /// Builder function for creating a BatchRequest
    pub fn batch_request(commit_hash: String) -> Self {
        ProofData::BatchRequest { commit_hash }
    }

    /// Builder function for creating a InvalidCodeVersion
    pub fn invalid_code_version(commit_hash: String) -> Self {
        ProofData::InvalidCodeVersion { commit_hash }
    }

    /// Builder function for creating a BatchResponse
    pub fn batch_response(batch_number: u64, input: ProverInputData) -> Self {
        ProofData::BatchResponse {
            batch_number: Some(batch_number),
            input: Some(input),
        }
    }

    pub fn empty_batch_response() -> Self {
        ProofData::BatchResponse {
            batch_number: None,
            input: None,
        }
    }

    /// Builder function for creating a ProofSubmit
    pub fn proof_submit(batch_number: u64, batch_proof: BatchProof) -> Self {
        ProofData::ProofSubmit {
            batch_number,
            batch_proof,
        }
    }

    /// Builder function for creating a ProofSubmitAck
    pub fn proof_submit_ack(batch_number: u64) -> Self {
        ProofData::ProofSubmitACK { batch_number }
    }
}

pub fn get_commit_hash() -> String {
    env!("VERGEN_GIT_SHA").to_string()
}

#[derive(Clone)]
pub struct ProofCoordinatorState {
    listen_ip: IpAddr,
    port: u16,
    store: Store,
    eth_client: EthClient,
    on_chain_proposer_address: Address,
    elasticity_multiplier: u64,
    rollup_store: StoreRollup,
    rpc_url: String,
    l1_private_key: SecretKey,
    blockchain: Arc<Blockchain>,
    validium: bool,
    needed_proof_types: Vec<ProverType>,
    commit_hash: String,
}

impl ProofCoordinatorState {
    #[allow(clippy::too_many_arguments)]
    pub async fn new(
        config: &ProofCoordinatorConfig,
        committer_config: &CommitterConfig,
        eth_config: &EthConfig,
        proposer_config: &BlockProducerConfig,
        store: Store,
        rollup_store: StoreRollup,
        blockchain: Arc<Blockchain>,
        needed_proof_types: Vec<ProverType>,
    ) -> Result<Self, ProofCoordinatorError> {
        let eth_client = EthClient::new_with_config(
            eth_config.rpc_url.iter().map(AsRef::as_ref).collect(),
            eth_config.max_number_of_retries,
            eth_config.backoff_factor,
            eth_config.min_retry_delay,
            eth_config.max_retry_delay,
            Some(eth_config.maximum_allowed_max_fee_per_gas),
            Some(eth_config.maximum_allowed_max_fee_per_blob_gas),
        )?;
        let on_chain_proposer_address = committer_config.on_chain_proposer_address;

        let rpc_url = eth_config
            .rpc_url
            .first()
            .ok_or(ProofCoordinatorError::Custom(
                "no rpc urls present!".to_string(),
            ))?
            .to_string();

        Ok(Self {
            listen_ip: config.listen_ip,
            port: config.listen_port,
            store,
            eth_client,
            on_chain_proposer_address,
            elasticity_multiplier: proposer_config.elasticity_multiplier,
            rollup_store,
            rpc_url,
            l1_private_key: config.l1_private_key,
            blockchain,
            validium: config.validium,
            needed_proof_types,
            commit_hash: get_commit_hash(),
        })
    }
}

#[derive(Clone)]
pub enum ProofCordInMessage {
    Listen { listener: Arc<TcpListener> },
}

#[derive(Clone, PartialEq)]
pub enum ProofCordOutMessage {
    Done,
}

pub struct ProofCoordinator;

impl ProofCoordinator {
    pub async fn spawn(
        store: Store,
        rollup_store: StoreRollup,
        cfg: SequencerConfig,
        blockchain: Arc<Blockchain>,
        needed_proof_types: Vec<ProverType>,
    ) -> Result<(), ProofCoordinatorError> {
        let state = ProofCoordinatorState::new(
            &cfg.proof_coordinator,
            &cfg.l1_committer,
            &cfg.eth,
            &cfg.block_producer,
            store,
            rollup_store,
            blockchain,
            needed_proof_types,
        )
        .await?;
        let listener =
            Arc::new(TcpListener::bind(format!("{}:{}", state.listen_ip, state.port)).await?);
        let mut proof_coordinator = ProofCoordinator::start(state);
        let _ = proof_coordinator
            .cast(ProofCordInMessage::Listen { listener })
            .await;
        Ok(())
    }
}

impl GenServer for ProofCoordinator {
    type CallMsg = Unused;
    type CastMsg = ProofCordInMessage;
    type OutMsg = ProofCordOutMessage;
    type State = ProofCoordinatorState;
    type Error = ProofCoordinatorError;

    fn new() -> Self {
        Self {}
    }

    async fn handle_cast(
        &mut self,
        message: Self::CastMsg,
        _handle: &GenServerHandle<Self>,
        state: Self::State,
    ) -> CastResponse<Self> {
        match message {
            ProofCordInMessage::Listen { listener } => {
                handle_listens(&state, listener).await;
            }
        }
        CastResponse::Stop
    }
}

async fn handle_listens(state: &ProofCoordinatorState, listener: Arc<TcpListener>) {
    info!("Starting TCP server at {}:{}.", state.listen_ip, state.port);
    loop {
        let res = listener.accept().await;
        match res {
            Ok((stream, addr)) => {
                // Cloning the ProofCoordinatorState structure to use the handle_connection() fn
                // in every spawned task.
                // The important fields are `Store` and `EthClient`
                // Both fields are wrapped with an Arc, making it possible to clone
                // the entire structure.
                let _ = ConnectionHandler::spawn(state.clone(), stream, addr)
                    .await
                    .inspect_err(|err| {
                        error!("Error starting ConnectionHandler: {err}");
                    });
            }
            Err(e) => {
                error!("Failed to accept connection: {e}");
            }
        }

        debug!("Connection closed");
    }
}

struct ConnectionHandler;

impl ConnectionHandler {
    async fn spawn(
        state: ProofCoordinatorState,
        stream: TcpStream,
        addr: SocketAddr,
    ) -> Result<(), ConnectionHandlerError> {
        let mut connection_handler = ConnectionHandler::start(state);
        connection_handler
            .cast(ConnInMessage::Connection {
                stream: Arc::new(stream),
                addr,
            })
            .await
            .map_err(ConnectionHandlerError::GenServerError)
    }
}

#[derive(Clone)]
pub enum ConnInMessage {
    Connection {
        stream: Arc<TcpStream>,
        addr: SocketAddr,
    },
}

#[derive(Clone, PartialEq)]
pub enum ConnOutMessage {
    Done,
}

impl GenServer for ConnectionHandler {
    type CallMsg = Unused;
    type CastMsg = ConnInMessage;
    type OutMsg = ConnOutMessage;
    type State = ProofCoordinatorState;
    type Error = ProofCoordinatorError;

    fn new() -> Self {
        Self {}
    }

    async fn handle_cast(
        &mut self,
        message: Self::CastMsg,
        _handle: &GenServerHandle<Self>,
        state: Self::State,
    ) -> CastResponse<Self> {
        match message {
            ConnInMessage::Connection { stream, addr } => {
                if let Err(err) = handle_connection(&state, stream).await {
                    error!("Error handling connection from {addr}: {err}");
                } else {
                    debug!("Connection from {addr} handled successfully");
                }
            }
        }
        CastResponse::Stop
    }
}

async fn handle_connection(
    state: &ProofCoordinatorState,
    stream: Arc<TcpStream>,
) -> Result<(), ProofCoordinatorError> {
    let mut buffer = Vec::new();
    // TODO: This should be fixed in https://github.com/lambdaclass/ethrex/issues/3316
    // (stream should not be wrapped in an Arc)
    if let Some(mut stream) = Arc::into_inner(stream) {
        stream.read_to_end(&mut buffer).await?;

        let data: Result<ProofData, _> = serde_json::from_slice(&buffer);
        match data {
            Ok(ProofData::BatchRequest { commit_hash }) => {
                if let Err(e) = handle_request(state, &mut stream, commit_hash).await {
                    error!("Failed to handle BatchRequest: {e}");
                }
            }
            Ok(ProofData::ProofSubmit {
                batch_number,
                batch_proof,
            }) => {
                if let Err(e) = handle_submit(state, &mut stream, batch_number, batch_proof).await {
                    error!("Failed to handle ProofSubmit: {e}");
                }
            }
            Ok(ProofData::ProverSetup {
                prover_type,
                payload,
            }) => {
                if let Err(e) = handle_setup(state, &mut stream, prover_type, payload).await {
                    error!("Failed to handle ProverSetup: {e}");
                }
            }
            Ok(_) => {
                warn!("Invalid request");
            }
            Err(e) => {
                warn!("Failed to parse request: {e}");
            }
        }
        debug!("Connection closed");
    } else {
        error!("Unable to use stream");
    }
    Ok(())
}

async fn handle_request(
    state: &ProofCoordinatorState,
    stream: &mut TcpStream,
    commit_hash: String,
) -> Result<(), ProofCoordinatorError> {
    info!("BatchRequest received");

    if commit_hash != state.commit_hash {
        error!(
            "Code version mismatch: expected {}, got {}",
            state.commit_hash, commit_hash
        );

        let response = ProofData::invalid_code_version(state.commit_hash.clone());
        send_response(stream, &response).await?;
        info!("InvalidCodeVersion sent");
        return Ok(());
    }

    let batch_to_verify = 1 + get_latest_sent_batch(
        state.needed_proof_types.clone(),
        &state.rollup_store,
        &state.eth_client,
        state.on_chain_proposer_address,
    )
    .await
    .map_err(|err| ProofCoordinatorError::InternalError(err.to_string()))?;

    let response = if !state.rollup_store.contains_batch(&batch_to_verify).await? {
        debug!("Sending empty BatchResponse");
        ProofData::empty_batch_response()
    } else {
        let input = create_prover_input(state, batch_to_verify).await?;
        debug!("Sending BatchResponse for block_number: {batch_to_verify}");
        ProofData::batch_response(batch_to_verify, input)
    };

    send_response(stream, &response).await?;
    info!("BatchResponse sent for batch number: {batch_to_verify}");

    Ok(())
}

async fn handle_submit(
    state: &ProofCoordinatorState,
    stream: &mut TcpStream,
    batch_number: u64,
    batch_proof: BatchProof,
) -> Result<(), ProofCoordinatorError> {
    info!("ProofSubmit received for batch number: {batch_number}");

    // Check if we have a proof for this batch and prover type
    let prover_type = batch_proof.prover_type();
    if state
        .rollup_store
        .get_proof_by_batch_and_type(batch_number, prover_type)
        .await?
        .is_some()
    {
        info!(
            ?batch_number,
            ?prover_type,
            "A proof was received for a batch and type that is already stored"
        );
    } else {
        // If not, store it
        state
            .rollup_store
            .store_proof_by_batch_and_type(batch_number, prover_type, batch_proof)
            .await?;
    }
    let response = ProofData::proof_submit_ack(batch_number);
    send_response(stream, &response).await?;
    info!("ProofSubmit ACK sent");
    Ok(())
}

async fn handle_setup(
    state: &ProofCoordinatorState,
    stream: &mut TcpStream,
    prover_type: ProverType,
    payload: Bytes,
) -> Result<(), ProofCoordinatorError> {
    info!("ProverSetup received for {prover_type}");

    match prover_type {
        ProverType::TDX => {
            prepare_quote_prerequisites(
                &state.eth_client,
                &state.rpc_url,
                &hex::encode(state.l1_private_key.as_ref()),
                &hex::encode(&payload),
            )
            .await
            .map_err(|e| ProofCoordinatorError::Custom(format!("Could not setup TDX key {e}")))?;
            register_tdx_key(
                &state.eth_client,
                &state.l1_private_key,
                state.on_chain_proposer_address,
                payload,
            )
            .await?;
        }
        _ => {
            warn!("Setup requested for {prover_type}, which doesn't need setup.")
        }
    }

    let response = ProofData::prover_setup_ack();

    send_response(stream, &response).await?;
    info!("ProverSetupACK sent");
    Ok(())
}

async fn create_prover_input(
    state: &ProofCoordinatorState,
    batch_number: u64,
) -> Result<ProverInputData, ProofCoordinatorError> {
    // Get blocks in batch
    let Some(block_numbers) = state
        .rollup_store
        .get_block_numbers_by_batch(batch_number)
        .await?
    else {
        return Err(ProofCoordinatorError::ItemNotFoundInStore(format!(
            "Batch number {batch_number} not found in store"
        )));
    };

    let blocks = fetch_blocks(state, block_numbers).await?;

    let witness = state
        .blockchain
        .generate_witness_for_blocks(&blocks)
        .await
        .map_err(ProofCoordinatorError::from)?;

    // Get blobs bundle cached by the L1 Committer (blob, commitment, proof)
    let (blob_commitment, blob_proof) = if state.validium {
        ([0; 48], [0; 48])
    } else {
        let blob = state
            .rollup_store
            .get_blobs_by_batch(batch_number)
            .await?
            .ok_or(ProofCoordinatorError::MissingBlob(batch_number))?;
        let BlobsBundle {
            mut commitments,
            mut proofs,
            ..
        } = BlobsBundle::create_from_blobs(&blob)?;
        match (commitments.pop(), proofs.pop()) {
            (Some(commitment), Some(proof)) => (commitment, proof),
            _ => return Err(ProofCoordinatorError::MissingBlob(batch_number)),
        }
    };

    debug!("Created prover input for batch {batch_number}");

    Ok(ProverInputData {
        db: witness,
        blocks,
        elasticity_multiplier: state.elasticity_multiplier,
        #[cfg(feature = "l2")]
        blob_commitment,
        #[cfg(feature = "l2")]
        blob_proof,
    })
}

async fn fetch_blocks(
    state: &ProofCoordinatorState,
    block_numbers: Vec<u64>,
) -> Result<Vec<Block>, ProofCoordinatorError> {
    let mut blocks = vec![];
    for block_number in block_numbers {
        let header = state
            .store
            .get_block_header(block_number)?
            .ok_or(ProofCoordinatorError::StorageDataIsNone)?;
        let body = state
            .store
            .get_block_body(block_number)
            .await?
            .ok_or(ProofCoordinatorError::StorageDataIsNone)?;
        blocks.push(Block::new(header, body));
    }
    Ok(blocks)
}

async fn send_response(
    stream: &mut TcpStream,
    response: &ProofData,
) -> Result<(), ProofCoordinatorError> {
    let buffer = serde_json::to_vec(response)?;
    stream
        .write_all(&buffer)
        .await
        .map_err(ProofCoordinatorError::ConnectionError)?;
    Ok(())
}
