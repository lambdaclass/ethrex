use crate::sequencer::errors::ProverServerError;
use crate::utils::prover::save_state::{
    block_number_has_state_file, write_state, StateFileType, StateType,
};
use crate::utils::{
    config::{
        committer::CommitterConfig, errors::ConfigError, eth::EthConfig,
        proof_coordinator::ProofCoordinatorConfig,
    },
    prover::proving_systems::ProofCalldata,
};
use ethrex_common::{
    types::{Block, BlockHeader},
    Address,
};
use ethrex_rpc::clients::eth::EthClient;
use ethrex_storage::Store;
use ethrex_vm::{Evm, EvmError, ExecutionDB};
use serde::{Deserialize, Serialize};
use std::{fmt::Debug, net::IpAddr};
use tokio::{
    io::{AsyncReadExt, AsyncWriteExt},
    net::{TcpListener, TcpStream},
    sync::TryAcquireError,
};
use tracing::{debug, error, info, warn};

use super::utils::sleep_random;

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct ProverInputData {
    pub block: Block,
    pub parent_block_header: BlockHeader,
    pub db: ExecutionDB,
}

#[derive(Clone)]
struct ProofCoordinator {
    listen_ip: IpAddr,
    port: u16,
    store: Store,
    eth_client: EthClient,
    on_chain_proposer_address: Address,
}

/// Enum for the ProverServer <--> ProverClient Communication Protocol.
#[derive(Serialize, Deserialize)]
pub enum ProofData {
    /// 1.
    /// The Client initiates the connection with a BlockRequest.
    /// Asking for the ProverInputData the prover_server considers/needs.
    BlockRequest,

    /// 2.
    /// The Server responds with a BlockResponse containing the ProverInputData.
    /// If the BlockResponse is ProofData::BlockResponse{None, None},
    /// the Client knows the BlockRequest couldn't be performed.
    BlockResponse {
        block_number: Option<u64>,
        input: Option<ProverInputData>,
    },

    /// 3.
    /// The Client submits the zk Proof generated by the prover
    /// for the specified block, as calldata for the verifier contract.
    ProofSubmit {
        block_number: u64,
        calldata: ProofCalldata,
    },

    /// 4.
    /// The Server acknowledges the receipt of the proof and updates its state,
    ProofSubmitACK { block_number: u64 },
}

impl ProofData {
    /// Builder function for creating a BlockRequest
    pub fn block_request() -> Self {
        ProofData::BlockRequest
    }

    /// Builder function for creating a BlockResponse
    pub fn block_response(block_number: u64, input: ProverInputData) -> Self {
        ProofData::BlockResponse {
            block_number: Some(block_number),
            input: Some(input),
        }
    }

    pub fn empty_block_response() -> Self {
        ProofData::BlockResponse {
            block_number: None,
            input: None,
        }
    }

    /// Builder function for creating a ProofSubmit
    pub fn proof_submit(block_number: u64, calldata: ProofCalldata) -> Self {
        ProofData::ProofSubmit {
            block_number,
            calldata,
        }
    }

    /// Builder function for creating a ProofSubmitAck
    pub fn proof_submit_ack(block_number: u64) -> Self {
        ProofData::ProofSubmitACK { block_number }
    }
}

pub async fn start_proof_coordinator(store: Store) -> Result<(), ConfigError> {
    let server_config = ProofCoordinatorConfig::from_env()?;
    let eth_config = EthConfig::from_env()?;
    let committer_config = CommitterConfig::from_env()?;
    let prover_server = ProofCoordinator::new_from_config(
        server_config.clone(),
        &committer_config,
        eth_config.clone(),
        store,
    )
    .await?;
    prover_server.run().await;

    Ok(())
}

impl ProofCoordinator {
    pub async fn new_from_config(
        config: ProofCoordinatorConfig,
        committer_config: &CommitterConfig,
        eth_config: EthConfig,
        store: Store,
    ) -> Result<Self, ConfigError> {
        let eth_client = EthClient::new(&eth_config.rpc_url);
        let on_chain_proposer_address = committer_config.on_chain_proposer_address;

        Ok(Self {
            listen_ip: config.listen_ip,
            port: config.listen_port,
            store,
            eth_client,
            on_chain_proposer_address,
        })
    }

    pub async fn run(&self) {
        loop {
            if let Err(err) = self.main_logic().await {
                error!("L1 Proof Coordinator Error: {}", err);
            }

            sleep_random(200).await;
        }
    }

    async fn main_logic(&self) -> Result<(), ProverServerError> {
        let listener = TcpListener::bind(format!("{}:{}", self.listen_ip, self.port)).await?;

        let concurent_clients = 3;
        let sem = std::sync::Arc::new(tokio::sync::Semaphore::new(concurent_clients));
        info!(
            "Starting TCP server at {}:{} accepting {concurent_clients} concurrent clients.",
            self.listen_ip, self.port
        );

        loop {
            let res = listener.accept().await;
            match res {
                Ok((stream, addr)) => {
                    match sem.clone().try_acquire_owned() {
                        Ok(permit) => {
                            // Cloning the ProverServer structure to use the handle_connection() fn
                            // in every spawned task.
                            // The important fields are `Store` and `EthClient`
                            // Both fields are wrapped with an Arc, making it possible to clone
                            // the entire structure.
                            let self_clone = self.clone();
                            tokio::task::spawn(async move {
                                if let Err(e) = self_clone.handle_connection(stream).await {
                                    error!("Error handling connection from {addr}: {e}");
                                } else {
                                    debug!("Connection from {addr} handled successfully");
                                }
                                drop(permit);
                            });
                        }
                        Err(e) => match e {
                            TryAcquireError::Closed => {
                                error!("Fatal error the semaphore has been closed: {e}")
                            }
                            TryAcquireError::NoPermits => {
                                warn!("Connection limit reached. Closing connection from {addr}.")
                            }
                        },
                    }
                }
                Err(e) => {
                    error!("Failed to accept connection: {e}");
                }
            }
        }
    }

    async fn handle_connection(&self, mut stream: TcpStream) -> Result<(), ProverServerError> {
        let mut buffer = Vec::new();
        stream.read_to_end(&mut buffer).await?;

        let data: Result<ProofData, _> = serde_json::from_slice(&buffer);
        match data {
            Ok(ProofData::BlockRequest) => {
                if let Err(e) = self.handle_request(&mut stream).await {
                    error!("Failed to handle BlockRequest: {e}");
                }
            }
            Ok(ProofData::ProofSubmit {
                block_number,
                calldata,
            }) => {
                if let Err(e) = self
                    .handle_submit(&mut stream, block_number, calldata)
                    .await
                {
                    error!("Failed to handle ProofSubmit: {e}");
                }
            }
            Err(e) => {
                warn!("Failed to parse request: {e}");
            }
            _ => {
                warn!("Invalid request");
            }
        }

        debug!("Connection closed");
        Ok(())
    }

    async fn handle_request(&self, stream: &mut TcpStream) -> Result<(), ProverServerError> {
        info!("BlockRequest received");

        let block_to_verify = 1 + EthClient::get_last_verified_block(
            &self.eth_client,
            self.on_chain_proposer_address,
        )
        .await?;

        let latest_block_number = self.store.get_latest_block_number().await?;

        let response = if block_to_verify > latest_block_number {
            let response = ProofData::empty_block_response();
            debug!("Sending empty BlockResponse");
            response
        } else {
            let input = self.create_prover_input(block_to_verify).await?;
            let response = ProofData::block_response(block_to_verify, input);
            debug!("Sending BlockResponse for block_number: {block_to_verify}");
            response
        };

        let buffer = serde_json::to_vec(&response)?;
        stream
            .write_all(&buffer)
            .await
            .map_err(ProverServerError::ConnectionError)
            .map(|_| info!("BlockResponse sent for block number: {block_to_verify}"))
    }

    async fn handle_submit(
        &self,
        stream: &mut TcpStream,
        block_number: u64,
        calldata: ProofCalldata,
    ) -> Result<(), ProverServerError> {
        info!("ProofSubmit received for block number: {block_number}");

        // Check if we have the proof for that ProverType
        if block_number_has_state_file(StateFileType::Proof(calldata.prover_type), block_number)? {
            debug!("Already known proof. Skipping");
        } else {
            write_state(block_number, &StateType::Proof(calldata))?;
        }

        let response = ProofData::proof_submit_ack(block_number);

        let buffer = serde_json::to_vec(&response)?;
        stream
            .write_all(&buffer)
            .await
            .map_err(ProverServerError::ConnectionError)
            .map(|_| info!("ProofSubmit ACK sent"))
    }

    async fn create_prover_input(
        &self,
        block_number: u64,
    ) -> Result<ProverInputData, ProverServerError> {
        let header = self
            .store
            .get_block_header(block_number)?
            .ok_or(ProverServerError::StorageDataIsNone)?;
        let body = self
            .store
            .get_block_body(block_number)
            .await?
            .ok_or(ProverServerError::StorageDataIsNone)?;

        let block = Block::new(header, body);

        let db = Evm::to_execution_db(&self.store.clone(), &block)
            .await
            .map_err(EvmError::ExecutionDB)?;

        let parent_block_header = self
            .store
            .get_block_header_by_hash(block.header.parent_hash)?
            .ok_or(ProverServerError::StorageDataIsNone)?;

        debug!("Created prover input for block {block_number}");

        Ok(ProverInputData {
            db,
            block,
            parent_block_header,
        })
    }
}
