use std::collections::HashMap;
use std::env;
use std::ops::Add;
use std::str::FromStr;

use ethereum_types::{Address, H160, H256, U256};
use ethrex_l2_sdk::calldata::{encode_calldata, Value};
use ethrex_l2_sdk::get_address_from_secret_key;
use ethrex_rpc::clients::eth::errors::{CalldataEncodeError, EthClientError};
use ethrex_rpc::clients::eth::EthClient;
use secp256k1::SecretKey;
use std::process::Command;


#[derive(Debug, thiserror::Error)]
pub enum PusherError {
    #[error("Missing env variable: {0}")]
    MissingConfig(String),
    #[error("Parsing Error: {0}")]
    ParseError(String),
    #[error("Request Error: {0}")]
    RequestError(reqwest::Error),
    #[error("Invalid request response, missing key: {0}")]
    ResponseMissingKey(String),
    #[error("Invalid request response, invalid value: {0}")]
    ResponseInvalidValue(String),
    #[error("Failed to encode calldata: {0}")]
    CalldataEncodeError(#[from] CalldataEncodeError),
    #[error("Deployer EthClient error: {0}")]
    EthClientError(#[from] EthClientError),
    #[error("Command execution error: {0}")]
    CommandError(std::io::Error),
}

const UPDATE_KEY_SIGNATURE: &str = "updateKey(address,bytes)";

async fn setup_key(
    eth_client: &EthClient,
    rpc_url: &str,
    private_key_str: &str,
    web_client: &reqwest::Client,
    private_key: &SecretKey,
    prover_url: &str,
    contract_addr: Address,
) -> Result<(), PusherError> {
    let resp = web_client
        .get(format!("{prover_url}/getkey"))
        .send()
        .await
        .map_err(PusherError::RequestError)?;
    let json = resp
        .json::<HashMap<String, String>>()
        .await
        .map_err(|_| PusherError::ParseError("Couldn't parse getkey response".to_string()))?;

    let sig_addr = json
        .get("address")
        .ok_or(PusherError::ResponseMissingKey("address".to_string()))?;
    let quote = json
        .get("quote")
        .ok_or(PusherError::ResponseMissingKey("quote".to_string()))?;

    prepare_quote_prerequisites(eth_client, rpc_url, private_key_str, &quote).await?;

    let sig_addr = H160::from_str(&sig_addr)
        .map_err(|_| PusherError::ResponseInvalidValue("Invalid address".to_string()))?;
    let quote = hex::decode(&quote)
        .map_err(|_| PusherError::ResponseInvalidValue("Invalid quote".to_string()))?;

    let tx_hash = send_update_key(eth_client, private_key, contract_addr, sig_addr, quote).await?;    
    println!("Signing key set. TX: {tx_hash}");
    Ok(())
}

const QPL_TOOL_PATH: &str = "automata-dcap-qpl/automata-dcap-qpl-tool/target/release/automata-dcap-qpl-tool";

async fn prepare_quote_prerequisites(
    eth_client: &EthClient,
    rpc_url: &str,
    private_key_str: &str,
    quote: &str
) -> Result<(), PusherError> {
    let chain_id = eth_client.get_chain_id().await.map_err(PusherError::EthClientError)?;

    Command::new(QPL_TOOL_PATH).args([
        "--chain_id",
        &chain_id.to_string(),
        "--rpc_url",
        rpc_url,
        "-p",
        private_key_str,
        "--quote_hex",
        &quote
    ]).output().map_err(PusherError::CommandError)?;
    Ok(())
}

async fn send_update_key(
    eth_client: &EthClient,
    private_key: &SecretKey,
    contract_addr: Address,
    sig_addr: Address,
    quote: Vec<u8>
) -> Result<H256, PusherError> {
    let my_address = get_address_from_secret_key(&private_key)
    .map_err(|_| PusherError::ParseError("Invalid private key".to_string()))?;

    let calldata = encode_calldata(
        UPDATE_KEY_SIGNATURE,
        &[Value::Address(sig_addr), Value::Bytes(quote.into())],
    )
    .map_err(PusherError::CalldataEncodeError)?;

    let tx = eth_client
        .build_eip1559_transaction(
            contract_addr,
            my_address,
            calldata.into(),
            Default::default(),
        )
        .await
        .map_err(PusherError::EthClientError)?;
    let mut wrapped_tx = ethrex_rpc::clients::eth::WrappedTransaction::EIP1559(tx);
    eth_client
        .set_gas_for_wrapped_tx(&mut wrapped_tx, my_address)
        .await
        .map_err(PusherError::EthClientError)?;
    let tx_hash: H256 = eth_client
        .send_tx_bump_gas_exponential_backoff(&mut wrapped_tx, &private_key)
        .await
        .map_err(PusherError::EthClientError)?;
    Ok(tx_hash)
}

const UPDATE_SIGNATURE: &str = "update(uint256,bytes)";

async fn do_transition(
    eth_client: &EthClient,
    web_client: &reqwest::Client,
    private_key: &SecretKey,
    prover_url: &str,
    contract_addr: Address,
    state: u64,
) -> Result<u64, PusherError> {
    let resp = web_client
        .get(format!("{prover_url}/transition"))
        .query(&[("state", state)])
        .send()
        .await
        .map_err(PusherError::RequestError)?;
    let json = resp
        .json::<HashMap<String, serde_json::Value>>()
        .await
        .map_err(|_| PusherError::ParseError("Couldn't parse transition response".to_string()))?;

    let new_state = json
        .get("new_state")
        .ok_or(PusherError::ResponseMissingKey("address".to_string()))?;
    let signature = json
        .get("signature")
        .ok_or(PusherError::ResponseMissingKey("quote".to_string()))?;

    let new_state = new_state.as_u64()
        .ok_or(PusherError::ResponseInvalidValue("Invalid new_state".to_string()))?;
    let signature = signature.as_str()
        .and_then(|sig| sig.strip_prefix("0x"))
        .and_then(|sig| hex::decode(sig).ok())
        .ok_or(PusherError::ResponseInvalidValue("signature quote".to_string()))?;

    let tx_hash = send_transition(eth_client, private_key, contract_addr, new_state, signature).await?;
    println!("Updated state. TX: {tx_hash}");
    Ok(new_state)
}

async fn send_transition(
    eth_client: &EthClient,
    private_key: &SecretKey,
    contract_addr: Address,
    new_state: u64,
    signature: Vec<u8>
) -> Result<H256, PusherError> {
    let my_address = get_address_from_secret_key(&private_key)
    .map_err(|_| PusherError::ParseError("Invalid private key".to_string()))?;

    let calldata = encode_calldata(
        UPDATE_SIGNATURE,
        &[
            Value::Uint(U256::from(new_state)),
            Value::Bytes(signature.into()),
        ],
    )
    .map_err(PusherError::CalldataEncodeError)?;

    let tx = eth_client
        .build_eip1559_transaction(
            contract_addr,
            my_address,
            calldata.into(),
            Default::default(),
        )
        .await
        .map_err(PusherError::EthClientError)?;
    let mut wrapped_tx = ethrex_rpc::clients::eth::WrappedTransaction::EIP1559(tx);
    eth_client
        .set_gas_for_wrapped_tx(&mut wrapped_tx, my_address)
        .await
        .map_err(PusherError::EthClientError)?;
    let tx_hash = eth_client
        .send_tx_bump_gas_exponential_backoff(&mut wrapped_tx, &private_key)
        .await
        .map_err(PusherError::EthClientError)?;
    Ok(tx_hash)
}

fn read_env_var(name: &str) -> Result<String, PusherError> {
    env::var(name.to_string()).map_err(|_| PusherError::MissingConfig(name.to_string()))
}

#[tokio::main]
async fn main() -> Result<(), PusherError> {
    let rpc_url = read_env_var("RPC_URL")?;
    let private_key_str = read_env_var("PRIVATE_KEY")?;
    let contract_addr = read_env_var("CONTRACT_ADDRESS")?;
    let prover_url = env::var("PROVER_URL").unwrap_or("http://localhost:3001".to_string());

    let private_key = SecretKey::from_slice(
        H256::from_str(&private_key_str)
            .map_err(|_| PusherError::ParseError("Invalid PRIVATE_KEY".to_string()))?
            .as_bytes(),
    )
    .map_err(|_| PusherError::ParseError("Invalid PRIVATE_KEY".to_string()))?;
    let contract_addr: Address = H160::from_str(&contract_addr)
        .map_err(|_| PusherError::ParseError("Invalid CONTRACT_ADDRESS".to_string()))?;

    let eth_client = EthClient::new(&rpc_url);
    let web_client = reqwest::Client::new();

    let mut state = 100;
    setup_key(
        &eth_client,
        &rpc_url,
        &private_key_str,
        &web_client,
        &private_key,
        &prover_url,
        contract_addr,
    )
    .await?;
    loop {
        state = do_transition(
            &eth_client,
            &web_client,
            &private_key,
            &prover_url,
            contract_addr,
            state,
        )
        .await?;
        println!("New state: {state}");
    }
}

#[cfg(test)]
mod test {
    use std::{env, str::FromStr};

    use ethereum_types::{H256, H160, Address};
    use ethrex_l2_sdk::{calldata::encode_calldata, get_address_from_secret_key};
    use ethrex_rpc::EthClient;
    use secp256k1::SecretKey;

    use crate::{read_env_var, send_transition, send_update_key, prepare_quote_prerequisites};

    #[tokio::test]
    async fn integration_happy() {
        let rpc_url = read_env_var("RPC_URL").unwrap();
        let private_key_str = read_env_var("PRIVATE_KEY").unwrap();
        let contract_addr = read_env_var("CONTRACT_ADDRESS").unwrap();
    
        let private_key = SecretKey::from_slice(
            H256::from_str(&private_key_str)
                .unwrap()
                .as_bytes(),
        ).unwrap();
        let contract_addr: Address = H160::from_str(&contract_addr)
            .unwrap();
    
        let eth_client = EthClient::new(&rpc_url);

        let quote = "";
        let sig_addr = H160::from_str("0x3dB4216cE98187901cebE825E7082132F141E434").unwrap();
        let signature = hex::decode("1c11b9a185f5a8dd5e4fea98b59b929344df2788588e042bbe23f89b1850cd763b8827b40332095dfc54b42a8aec70cb20775db4f79e7a9f31abc583385c9c781c").unwrap();
        send_reset(&eth_client, &private_key, contract_addr).await;
        prepare_quote_prerequisites(&eth_client, &rpc_url, &private_key_str, quote).await.unwrap();
        let quote = hex::decode(quote).unwrap();
        send_update_key(&eth_client, &private_key, contract_addr, sig_addr, quote).await.unwrap();
        send_transition(&eth_client, &private_key, contract_addr, 101, signature).await.unwrap();
    }

    #[tokio::test]
    async fn bad_quote() {
        let rpc_url = read_env_var("RPC_URL").unwrap();
        let private_key_str = read_env_var("PRIVATE_KEY").unwrap();
        let contract_addr = read_env_var("CONTRACT_ADDRESS").unwrap();
    
        let private_key = SecretKey::from_slice(
            H256::from_str(&private_key_str)
                .unwrap()
                .as_bytes(),
        ).unwrap();
        let contract_addr: Address = H160::from_str(&contract_addr)
            .unwrap();
    
        let eth_client = EthClient::new(&rpc_url);

        let quote = "040002008100000000000000939a7233f79c4ca9940a0db3957f06077a6dcac667e3d3087a24c8f6338e832000000000060103000000000000000000000000005b38e33a6487958b72c3c12a938eaa5e3fd4510c51aeeab58c7d5ecee41d7c436489d6c8e4f92f160b7cad34207b00c100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000e70206000000000091eb2b44d141d4ece09f0c75c2c53d247a3c68edd7fafe8a3520c942a604a407de03ae6dc5f87f27428b2538873118b70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f3d617a1c89bd9a89ea145c15b04383b7db7318f41a851802bba8eace5a6cf71050e65f65fd50176e4f006764a426430b45851b23aeb38340d4acf3d3d7422da907e47ae92b776c7cdbdef000cbd652cb351e207f29eb3f59c41bac9d8afe50fc8c7374c947c0d5f8002528da84a9fe99f529e0872443e78d08ee7ca0d1d39e6284aef7df59f5732dbcf77df6a4ff3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b2ac33cb59c62b8d7c30a1c25ebe5bff6bd738ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc100000e8be61a312e119af85788fb5d29c4f25bf5c569c6c72594da4b577b20f908eea95d568931f095c071626d0e862720d734c155d26228e5723de0f9d97ac6d6e8c54e24e121408162e823678adabe63fc825c62de3fe05addafc33637eeeef11d4b2bbec67218fbfbe8903d5e7c237c3c7801e9f47c90e0a5a0a82d54a0a5b125d0600461000000303191b04ff0006000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000e700000000000000e5a3a7b5d830c2953b98534c6c59a3a34fdc34e933f7f5898f0a85cf08846bca0000000000000000000000000000000000000000000000000000000000000000dc9e2a7c6f948f17474e34a7fc43ed030f7c1563f1babddf6340c82e0e54a8c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f8d4752b57acee2fa7b7112d629f1422269f244f9d6694326170d66b1ebee54100000000000000000000000000000000000000000000000000000000000000003650e1a01fcf330edef242f1376fd7dfff66de88721ee7ac94eec1d0e2fa9c30f503a7bd32cf9cf3bcda0cbef34f3c948faa80246d337e5c2676e51d5a23c4302000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f05005e0e00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d49494538444343424a6167417749424167495551427a5665504b714c2b787338632b53392f694c3861727468767777436759494b6f5a497a6a3045417749770a634445694d434147413155454177775a535735305a577767553064594946424453794251624746305a6d397962534244515445614d42674741315545436777520a535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d51737743515944565151490a44414a445154454c4d416b474131554542684d4356564d774868634e4d6a55774e4449354d54497a4d4445325768634e4d7a49774e4449354d54497a4d4445320a576a42774d534977494159445651514444426c4a626e526c624342545231676755454e4c49454e6c636e52705a6d6c6a5958526c4d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424846690a72336275797430747a6b5a5a6846367634686d6868384844646f4c3347394b313171363977686265696a536e2b5a6f7056467070566f395450434f443133696f0a78416d53394e377577663830416276686537436a67674d4d4d4949444344416642674e5648534d4547444157674253566231334e765276683655424a796454300a4d383442567776655644427242674e56485238455a4442694d47436758714263686c706f64485277637a6f764c32467761533530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c334e6e6543396a5a584a3061575a7059324630615739754c3359304c33426a61324e796244396a595431770a624746305a6d397962535a6c626d4e765a476c755a7a316b5a584977485159445652304f42425945464c7632362b51454c67443832776379324639486e592b760a484b53374d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949434f51594a4b6f5a496876684e415130420a424949434b6a4343416959774867594b4b6f5a496876684e41513042415151517245744a315a7151597a455a396838684a764c417754434341574d47436971470a534962345451454e41514977676746544d42414743797147534962345451454e41514942416745444d42414743797147534962345451454e41514943416745440a4d42414743797147534962345451454e41514944416745434d42414743797147534962345451454e41514945416745434d42414743797147534962345451454e0a41514946416745454d42414743797147534962345451454e41514947416745424d42414743797147534962345451454e41514948416745414d424147437971470a534962345451454e41514949416745464d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b416745410a4d42414743797147534962345451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962345451454e0a4151494e416745414d42414743797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d424147437971470a534962345451454e41514951416745414d42414743797147534962345451454e415149524167454c4d42384743797147534962345451454e41514953424241440a41774943424145414251414141414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e415151450a42724441627741414144415042676f71686b69472b45304244514546436745424d42344743697147534962345451454e41515945454e48784e30494858586f4b0a4f376e6778582b5a367a51775241594b4b6f5a496876684e41513042427a41324d42414743797147534962345451454e415163424151482f4d424147437971470a534962345451454e415163434151482f4d42414743797147534962345451454e415163444151482f4d416f4743437147534d343942414d43413067414d4555430a495143485534796755617777773069586b7663574555475269516566726c794655757a33746453674f364c7878774967624e582b6c51687448682f4f4e3066780a702b2b61684a75596c7571375a347859384e5252377070457a764d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c6a4343416a32674177494241674956414a567658633239472b487051456e4a3150517a7a674658433935554d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484178496a41670a42674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d45556c75644756730a49454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b474131554543417743513045780a437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741454e53422f377432316c58534f0a3243757a7078773734654a423732457944476757357258437478327456544c7136684b6b367a2b5569525a436e71523770734f766771466553786c6d546c4a6c0a65546d693257597a33714f42757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f536347724442530a42674e5648523845537a424a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e5648513445466751556c5739640a7a62306234656c4153636e553944504f4156634c336c517744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159420a4166384341514177436759494b6f5a497a6a30454177494452774177524149675873566b6930772b6936565947573355462f32327561586530594a446a3155650a6e412b546a44316169356343494359623153416d4435786b66545670766f34556f79695359787244574c6d5552344349394e4b7966504e2b0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        let sig_addr = H160::from_str("0xB2ac33cb59C62b8D7C30a1c25ebE5BFF6bd738ec").unwrap();
        send_reset(&eth_client, &private_key, contract_addr).await;
        prepare_quote_prerequisites(&eth_client, &rpc_url, &private_key_str, quote).await.unwrap();
        let quote = hex::decode(quote).unwrap();
        let res = send_update_key(&eth_client, &private_key, contract_addr, sig_addr, quote).await;
        assert!(res.is_err());
    }

    #[tokio::test]
    async fn unloaded_key() {
        let rpc_url = read_env_var("RPC_URL").unwrap();
        let private_key_str = read_env_var("PRIVATE_KEY").unwrap();
        let contract_addr = read_env_var("CONTRACT_ADDRESS").unwrap();
    
        let private_key = SecretKey::from_slice(
            H256::from_str(&private_key_str)
                .unwrap()
                .as_bytes(),
        ).unwrap();
        let contract_addr: Address = H160::from_str(&contract_addr)
            .unwrap();
    
        let eth_client = EthClient::new(&rpc_url);

        let signature = hex::decode("4227da043c51f4702c5b740605c666857c7961358ab4f17cea25d5095ac0661d61850e78533281b008cbff6fa301933fac8fed53c949674f705d37b6bf61718d1b").unwrap();
        send_reset(&eth_client, &private_key, contract_addr).await;
        let res = send_transition(&eth_client, &private_key, contract_addr, 101, signature).await;
        assert!(res.is_err());
    }

    #[tokio::test]
    async fn invalid_newstate() {
        let rpc_url = read_env_var("RPC_URL").unwrap();
        let private_key_str = read_env_var("PRIVATE_KEY").unwrap();
        let contract_addr = read_env_var("CONTRACT_ADDRESS").unwrap();
    
        let private_key = SecretKey::from_slice(
            H256::from_str(&private_key_str)
                .unwrap()
                .as_bytes(),
        ).unwrap();
        let contract_addr: Address = H160::from_str(&contract_addr)
            .unwrap();
    
        let eth_client = EthClient::new(&rpc_url);

        let quote = "";
        let sig_addr = H160::from_str("0xB2ac33cb59C62b8D7C30a1c25ebE5BFF6bd738ec").unwrap();
        let signature = hex::decode("a9e6d6c7c563da2b6bbf3387b7d2aa32ec72859b50325dd8293b9a58d76a15506e560bb320d041a95fd416091b4f4dc3af27a32ded841788b74560e910fd35b21b").unwrap();
        send_reset(&eth_client, &private_key, contract_addr).await;
        prepare_quote_prerequisites(&eth_client, &rpc_url, &private_key_str, quote).await.unwrap();
        let quote = hex::decode(quote).unwrap();
        send_update_key(&eth_client, &private_key, contract_addr, sig_addr, quote).await.unwrap();
        let res = send_transition(&eth_client, &private_key, contract_addr, 102, signature).await;
        assert!(res.is_err());
    }

    const RESET_SIGNATURE: &str = "reset()";

    async fn send_reset(
        eth_client: &EthClient,
        private_key: &SecretKey,
        contract_addr: Address
    ) {
        let my_address = get_address_from_secret_key(&private_key).unwrap();

        let calldata = encode_calldata(
            RESET_SIGNATURE,
            &[],
        ).unwrap();

        let tx = eth_client
            .build_eip1559_transaction(
                contract_addr,
                my_address,
                calldata.into(),
                Default::default(),
            )
            .await.unwrap();
        let mut wrapped_tx = ethrex_rpc::clients::eth::WrappedTransaction::EIP1559(tx);
        eth_client
            .set_gas_for_wrapped_tx(&mut wrapped_tx, my_address)
            .await.unwrap();
        eth_client
            .send_tx_bump_gas_exponential_backoff(&mut wrapped_tx, &private_key)
            .await.unwrap();
    }
}
